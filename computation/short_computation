;;; hw4_2
;;; Ning
;;;
;;; This program computes 3*((t-1)+2*(y-t)) - 3*(x-10) with given short x, y, z, t;

		extern  _printDec
		extern  _printInt
	        extern  _printString
	        extern  _println
	        extern  _getInput
	
	section	.data
prompt		db	"> "
promptLen	equ	$-prompt	
ansStr          db      "ans = "
ansStrLen	equ	$-ansStr	

;;; declare 5 16-bit short ints
x		dw	10      ; leave these values in
y		dw	20	; the different variables.
z		dw	30	; Moodle will use this to
t		dw	40	; verify that you haven't
ans		dw	50	; modified the original data
				; segment
	
		section	.text
		global	_start
_start:
	;; display prompt
		mov	ecx, prompt
		mov	edx, promptLen
		call	_printString
	;; get x
		call	_getInput
		mov	word[x], ax

	;; display prompt
		mov	ecx, prompt
		mov	edx, promptLen
		call	_printString
	;; get y
		call	_getInput
		mov	word[y], ax
	
	;; display prompt
		mov	ecx, prompt
		mov	edx, promptLen
		call	_printString
	;; get z
		call	_getInput
		mov	word[z], ax

	;; display prompt
		mov	ecx, prompt
		mov	edx, promptLen
		call	_printString
	;; get t
		call	_getInput
		mov	word[t], ax
	
	;; -----------------------------------
	;; computation: ans = 4*((x-1)+2*(y-t)) - 3*(x-10)
	;; -----------------------------------

	
	;;; ; ans == 6y + 27 - 3t - 3x
	mov ax, word[y]
	add ax, word[y]
	add ax, word[y]
	add ax, word[y]
	add ax, word[y]
	add ax, word[y]

	add ax, 27
	
	sub ax, word[t]
	sub ax, word[t]
	sub ax, word[t]
	

	sub ax, word[x]
	sub ax, word[x]
	sub ax, word[x]

	mov word[ans], ax
	;; -----------------------------------
	;; display "ans = "
	;; -----------------------------------
		mov	ecx, ansStr
		mov	edx, ansStrLen
		call	_printString

	;; -----------------------------------
	;; display ans variable
	;; -----------------------------------
		mov	eax, 0
		mov	ax, word[ans]
		call	_printInt
		call	_println
		call	_println
	
;;; exit
		mov	ebx, 0
		mov	eax, 1
		int     0x80	 	  	 		    	    	  	    	   	 	
